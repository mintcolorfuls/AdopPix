// <auto-generated />
using System;
using AdopPix.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdopPix.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220329064120_InitialAdopPixModel")]
    partial class InitialAdopPixModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("AdopPix.Models.Auction", b =>
                {
                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("HourId")
                        .HasColumnType("int");

                    b.Property<double>("OpeningPrice")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StopTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("AuctionId");

                    b.HasIndex("HourId");

                    b.HasIndex("UserId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionBid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("BidId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionBids");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ImageTypeId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("ImageTypeId");

                    b.ToTable("AuctionImages");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionNotification", b =>
                {
                    b.Property<int>("AucNotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isOpen")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AucNotiId");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionNotifications");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("TagId");

                    b.ToTable("AuctionTags");
                });

            modelBuilder.Entity("AdopPix.Models.HourType", b =>
                {
                    b.Property<int>("HourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.HasKey("HourId");

                    b.ToTable("HourType");
                });

            modelBuilder.Entity("AdopPix.Models.ImageType", b =>
                {
                    b.Property<int>("ImageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("ImageTypeId");

                    b.ToTable("ImageTypes");
                });

            modelBuilder.Entity("AdopPix.Models.Notification", b =>
                {
                    b.Property<int>("NotiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("RedirectToUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isOpen")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("NotiId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("AdopPix.Models.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AdopPix.Models.PostComment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("AdopPix.Models.PostImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.HasKey("ImageId");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("AdopPix.Models.PostLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("AdopPix.Models.PostView", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ViewId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostViews");
                });

            modelBuilder.Entity("AdopPix.Models.SocialMedias", b =>
                {
                    b.Property<int>("SocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("SocialId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("AdopPix.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AdopPix.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdopPix.Models.UserFollow", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IsFollowing")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FollowId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("AdopPix.Models.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AvaterName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("coverName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("fname")
                        .HasColumnType("longtext");

                    b.Property<string>("lname")
                        .HasColumnType("longtext");

                    b.Property<int>("money")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("AdopPix.Models.UserSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SocialId")
                        .HasColumnType("longtext");

                    b.Property<int?>("SocialMediasSocialId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediasSocialId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocials");
                });

            modelBuilder.Entity("AdopPix.Models.WinningBidder", b =>
                {
                    b.Property<string>("WinningId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AuctionId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("amount")
                        .HasColumnType("double");

                    b.HasKey("WinningId");

                    b.HasIndex("AuctionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("WinningBidders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AdopPix.Models.Auction", b =>
                {
                    b.HasOne("AdopPix.Models.HourType", "HourType")
                        .WithMany("Auctions")
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("Auctions")
                        .HasForeignKey("UserId");

                    b.Navigation("HourType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionBid", b =>
                {
                    b.HasOne("AdopPix.Models.Auction", "Auction")
                        .WithMany("AuctionBids")
                        .HasForeignKey("AuctionId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("AuctionBids")
                        .HasForeignKey("UserId");

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionImage", b =>
                {
                    b.HasOne("AdopPix.Models.Auction", "Auction")
                        .WithMany()
                        .HasForeignKey("AuctionId");

                    b.HasOne("AdopPix.Models.ImageType", "ImageType")
                        .WithMany("AuctionImages")
                        .HasForeignKey("ImageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("ImageType");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionNotification", b =>
                {
                    b.HasOne("AdopPix.Models.Auction", "Auction")
                        .WithMany("AuctionNotifications")
                        .HasForeignKey("AuctionId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("AuctionNotifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.AuctionTag", b =>
                {
                    b.HasOne("AdopPix.Models.Auction", "Auction")
                        .WithMany("AuctionTags")
                        .HasForeignKey("AuctionId");

                    b.HasOne("AdopPix.Models.Tag", "Tag")
                        .WithMany("AuctionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AdopPix.Models.Notification", b =>
                {
                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.Post", b =>
                {
                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.PostComment", b =>
                {
                    b.HasOne("AdopPix.Models.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.PostImage", b =>
                {
                    b.HasOne("AdopPix.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("AdopPix.Models.PostLike", b =>
                {
                    b.HasOne("AdopPix.Models.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.PostView", b =>
                {
                    b.HasOne("AdopPix.Models.Post", "Post")
                        .WithMany("PostViews")
                        .HasForeignKey("PostId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("PostViews")
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.UserFollow", b =>
                {
                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("UserFollows")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.UserProfile", b =>
                {
                    b.HasOne("AdopPix.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("AdopPix.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.UserSocial", b =>
                {
                    b.HasOne("AdopPix.Models.SocialMedias", "SocialMedias")
                        .WithMany("UserSocials")
                        .HasForeignKey("SocialMediasSocialId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("UserSocials")
                        .HasForeignKey("UserId");

                    b.Navigation("SocialMedias");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdopPix.Models.WinningBidder", b =>
                {
                    b.HasOne("AdopPix.Models.Auction", "Auction")
                        .WithOne("WinningBidder")
                        .HasForeignKey("AdopPix.Models.WinningBidder", "AuctionId");

                    b.HasOne("AdopPix.Models.User", "User")
                        .WithMany("WinningBidders")
                        .HasForeignKey("UserId");

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdopPix.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdopPix.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdopPix.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdopPix.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdopPix.Models.Auction", b =>
                {
                    b.Navigation("AuctionBids");

                    b.Navigation("AuctionNotifications");

                    b.Navigation("AuctionTags");

                    b.Navigation("WinningBidder");
                });

            modelBuilder.Entity("AdopPix.Models.HourType", b =>
                {
                    b.Navigation("Auctions");
                });

            modelBuilder.Entity("AdopPix.Models.ImageType", b =>
                {
                    b.Navigation("AuctionImages");
                });

            modelBuilder.Entity("AdopPix.Models.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostImages");

                    b.Navigation("PostLikes");

                    b.Navigation("PostViews");
                });

            modelBuilder.Entity("AdopPix.Models.SocialMedias", b =>
                {
                    b.Navigation("UserSocials");
                });

            modelBuilder.Entity("AdopPix.Models.Tag", b =>
                {
                    b.Navigation("AuctionTags");
                });

            modelBuilder.Entity("AdopPix.Models.User", b =>
                {
                    b.Navigation("AuctionBids");

                    b.Navigation("AuctionNotifications");

                    b.Navigation("Auctions");

                    b.Navigation("Notifications");

                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("PostViews");

                    b.Navigation("UserFollows");

                    b.Navigation("UserProfile");

                    b.Navigation("UserSocials");

                    b.Navigation("WinningBidders");
                });
#pragma warning restore 612, 618
        }
    }
}
